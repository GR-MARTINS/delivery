Observações: Sempre rodar com o flask run
usar o isort (pip install isort) para organizar os imports. Chamar no cmd isort nome_do_arquivo.py
usar o black (pip install black) para adequar a pep8. Chamar no cmd black nome_do_arquivo.py.

1 - Criar a venv
2 - instalar o flask
3 - criar o arquivo app.py com as rotas necessárias
4 - divir o projeto em app.py e views.py. As rotas ficaram no arquivo views.py.
5 - Ao tentar rodar irá dar um erro, pois o flask busca somente o programa app.py. Para corrigir isso, é só importar as funções de view para dentro do arquivo app.py. Após isso continuará dando erro, pois dentro das views são usados decorators do objeto app, localizado no arquivo app.py. Para corrigir isso, é só importar o app dentro do arquivo views. Agora teremos o erro de circular import, pois quando o app importa o views, o arquivo views tentará importar o objeto app do arquivo app.py, porém, neste momento, o objeto ainda não foi instanciado.
6 - correção 1: importar o arquivo views após a instanciação do objeto app. Funciona, mas foge da pep8 (a pep define que todas as importações devem ocorrer no topo do arquivo).
7 - correção 2: criar factories (funções que executarão o app futuramente). No arquivo principal, defina a função create_app. Nesta função (create_app) será instanciado o objeto app, este objeto será o retorno da mesma. Nos arquivos secundários (no nosso caso, views.py) também será definida uma função, esta será a init_app. Dentro da função init_app serão criadas as demais funcionalidades da aplicação (no nosso caso, as funções das rotas), ela receberá como parâmetro um objeto app. Após a criação dessas funções, o arquivo views pode ser importado no arquivo app. Para corrigir o circular import, dentro da função create app, após a instanciação do objeto app, iremos chamar os métodos, funções, classes, etc... contidos nos arquivos importados (no nosso caso, views.init_app()).

